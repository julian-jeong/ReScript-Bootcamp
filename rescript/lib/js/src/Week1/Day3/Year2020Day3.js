// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week1/Year2020Day3.sample.txt", "utf8");

var inputArray = input.split("\n");

function treeToOne($$char) {
  if ($$char === "#") {
    return 1;
  } else {
    return 0;
  }
}

function treeToOne2($$char) {
  if ($$char === "#") {
    return 1;
  } else {
    return 0;
  }
}

function getByCoord(coord, input) {
  return Belt_Option.map(Belt_Array.get(input, coord.down), (function (line) {
                return Belt_Array.get(line, coord.right);
              }));
}

var slope = {
  right: 3,
  down: 2
};

function constUnit(param) {
  
}

function makeCoords2(slope, inputArray) {
  var end = inputArray.length - 1 | 0;
  var _acc = [];
  var _newRight = 0;
  var _i = slope.down;
  while(true) {
    var i = _i;
    var newRight = _newRight;
    var acc = _acc;
    if (i > end) {
      return acc;
    }
    var right = Caml_int32.mod_(newRight + slope.right | 0, Caml_array.get(inputArray, i).length);
    var newAcc = Belt_Array.concat(acc, [[
            right,
            i
          ]]);
    _i = i + slope.down | 0;
    _newRight = right;
    _acc = newAcc;
    continue ;
  };
}

console.log(makeCoords2(slope, inputArray));

exports.input = input;
exports.inputArray = inputArray;
exports.treeToOne = treeToOne;
exports.treeToOne2 = treeToOne2;
exports.getByCoord = getByCoord;
exports.slope = slope;
exports.constUnit = constUnit;
exports.makeCoords2 = makeCoords2;
/* input Not a pure module */
