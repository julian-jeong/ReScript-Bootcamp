// Generated by ReScript, PLEASE EDIT WITH CARE
"use strict";

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

var input = Fs.readFileSync("input/Week1/Year2020Day6.sample.txt", "utf8");

function splitStr(arr, srt) {
  return arr.split(srt);
}

function makeGroups(input) {
  return Belt_Array.map(input.split("\n\n"), function (str) {
    return str.split("\n");
  });
}

var groups = makeGroups(input);

function setGroupAnswer(arr) {
  return Belt_SetString.fromArray(
    Belt_Array.concatMany(
      Belt_Array.map(arr, function (param) {
        return "".split(param);
      })
    )
  );
}

function answersCount(groups) {
  return Belt_Array.reduce(
    Belt_Array.map(Belt_Array.map(groups, setGroupAnswer), Belt_SetString.size),
    0,
    function (acc, value) {
      return (acc + value) | 0;
    }
  );
}

function stringToSet(str) {
  return Belt_SetString.fromArray(str.split(""));
}

function intersectAnswersToSet(group) {
  return Belt_Array.reduce(
    Belt_Array.map(group, stringToSet),
    Belt_SetString.fromArray("abcdefghijklmnopqrstuvwxyz".split("")),
    Belt_SetString.intersect
  );
}

function intersectAnswersCount(groups) {
  return Belt_Array.reduce(
    Belt_Array.map(
      Belt_Array.map(groups, intersectAnswersToSet),
      Belt_SetString.size
    ),
    0,
    function (a, b) {
      return (a + b) | 0;
    }
  );
}

console.log(intersectAnswersCount(groups));

exports.input = input;
exports.splitStr = splitStr;
exports.makeGroups = makeGroups;
exports.groups = groups;
exports.setGroupAnswer = setGroupAnswer;
exports.answersCount = answersCount;
exports.stringToSet = stringToSet;
exports.intersectAnswersToSet = intersectAnswersToSet;
exports.intersectAnswersCount = intersectAnswersCount;
/* input Not a pure module */
