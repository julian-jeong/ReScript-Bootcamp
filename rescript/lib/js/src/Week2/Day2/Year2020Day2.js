// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Belt_Array.map(Fs.readFileSync("input/Week2/Year2020Day2.sample.txt", "utf8").split("\n"), (function ($$char) {
        return $$char.split(" ");
      }));

var inputToPasswordType = Belt_Array.map(input, (function (password) {
        var range = Belt_Array.getExn(password, 0).split("-");
        var keyword = Belt_Array.getExn(password, 1)[0];
        var password$1 = Belt_Array.getExn(password, 2);
        return {
                min: Belt_Option.getWithDefault(Belt_Int.fromString(Belt_Array.getExn(range, 0)), 0),
                max: Belt_Option.getWithDefault(Belt_Int.fromString(Belt_Array.getExn(range, 1)), 0),
                keyword: keyword,
                password: password$1
              };
      }));

var part1 = Belt_Array.keep(inputToPasswordType, (function (password) {
        var length = Belt_Array.keep(password.password.split(""), (function ($$char) {
                return $$char === password.keyword;
              })).length;
        if (length >= password.min) {
          return length <= password.max;
        } else {
          return false;
        }
      }));

console.log(part1.length);

var part2 = Belt_Array.keep(inputToPasswordType, (function (password) {
        var first = password.password[password.min - 1 | 0];
        var end = password.password[password.max - 1 | 0];
        var keyword = password.keyword;
        if (first === keyword && end !== keyword) {
          return true;
        } else if (first !== keyword) {
          return end === keyword;
        } else {
          return false;
        }
      }));

console.log(part2.length);

exports.input = input;
exports.inputToPasswordType = inputToPasswordType;
exports.part1 = part1;
exports.part2 = part2;
/* input Not a pure module */
