// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Map = require("rescript/lib/js/belt_Map.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Range = require("rescript/lib/js/belt_Range.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week2/Year2020Day4.sample.txt", "utf8");

var cmp = Caml_obj.caml_compare;

var StrCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

function splitStrJoin(arr, str) {
  return arr.split(str).join(" ");
}

function multipleLineToSplit(str) {
  return str.split("\n").join(" ").split(" ");
}

function keyValueStringToMap(arr) {
  return Belt_Map.fromArray(Belt_Array.keepMap(Belt_Array.map(arr, (function (arr) {
                        return arr.split(":");
                      })), (function (arr) {
                    var match = arr;
                    if (match.length !== 2) {
                      return ;
                    }
                    var key = match[0];
                    var value = match[1];
                    return [
                            key,
                            value
                          ];
                  })), StrCmp);
}

function stringToMap(str) {
  return keyValueStringToMap(multipleLineToSplit(str));
}

function inputToMap(input) {
  return Belt_Array.map(input.split("\n\n"), stringToMap);
}

function validPassport(passport) {
  return Belt_Array.every([
              "byr",
              "iyr",
              "eyr",
              "hgt",
              "hcl",
              "ecl",
              "pid"
            ], (function (param) {
                return Belt_Map.has(passport, param);
              }));
}

function arrayToList(data) {
  return Belt_List.fromArray(Belt_Array.map(Belt_Map.toArray(data), (function (param) {
                    return [
                            param[0],
                            param[1]
                          ];
                  })));
}

function listToPassportType(list) {
  var byr = Belt_Option.flatMap(Belt_List.getAssoc(list, "byr", (function (k, v) {
              return k === v;
            })), Belt_Int.fromString);
  var iyr = Belt_Option.flatMap(Belt_List.getAssoc(list, "iyr", (function (k, v) {
              return k === v;
            })), Belt_Int.fromString);
  var eyr = Belt_Option.flatMap(Belt_List.getAssoc(list, "eyr", (function (k, v) {
              return k === v;
            })), Belt_Int.fromString);
  var hgt = Belt_List.getAssoc(list, "hgt", (function (k, v) {
          return k === v;
        }));
  var hcl = Belt_List.getAssoc(list, "hcl", (function (k, v) {
          return k === v;
        }));
  var ecl = Belt_List.getAssoc(list, "ecl", (function (k, v) {
          return k === v;
        }));
  var pid = Belt_List.getAssoc(list, "pid", (function (k, v) {
          return k === v;
        }));
  var cid = Belt_Option.flatMap(Belt_List.getAssoc(list, "cid", (function (k, v) {
              return k === v;
            })), Belt_Int.fromString);
  if (byr !== undefined && iyr !== undefined && eyr !== undefined && hgt !== undefined && hcl !== undefined && ecl !== undefined && pid !== undefined) {
    return {
            byr: byr,
            iyr: iyr,
            eyr: eyr,
            hgt: hgt,
            hcl: hcl,
            ecl: ecl,
            pid: pid,
            cid: cid
          };
  }
  
}

function checkRequiredFields(passport) {
  var fieldDefinitions = {
    hgt: /^(?:(?:1[5-9][0-9]|19[0-3])cm|(?:59|6[0-9]|7[0-6])in)$/,
    hcl: /^#[0-9a-f]{6}$/,
    ecl: /^(?:amb|blu|brn|gry|grn|hzl|oth)$/,
    pid: /^\d{9}$/
  };
  var byr = Belt_Range.some(1920, 2002, (function (i) {
          return i === passport.byr;
        }));
  var iyr = Belt_Range.some(2010, 2020, (function (i) {
          return i === passport.iyr;
        }));
  var eyr = Belt_Range.some(2020, 2030, (function (i) {
          return i === passport.eyr;
        }));
  var hgt = fieldDefinitions.hgt.test(passport.hgt);
  var hcl = fieldDefinitions.hcl.test(passport.hcl);
  var ecl = fieldDefinitions.ecl.test(passport.ecl);
  var pid = fieldDefinitions.pid.test(passport.pid);
  if (Belt_Array.every([
          byr,
          iyr,
          eyr,
          hgt,
          hcl,
          ecl,
          pid
        ], (function (x) {
            return x === true;
          }))) {
    return passport;
  }
  
}

function countVaildPassports(input) {
  return Belt_Array.keepMap(Belt_Array.keepMap(Belt_Array.map(Belt_Array.keep(inputToMap(input), validPassport), arrayToList), listToPassportType), checkRequiredFields).length;
}

console.log(countVaildPassports(input));

exports.input = input;
exports.StrCmp = StrCmp;
exports.splitStrJoin = splitStrJoin;
exports.multipleLineToSplit = multipleLineToSplit;
exports.keyValueStringToMap = keyValueStringToMap;
exports.stringToMap = stringToMap;
exports.inputToMap = inputToMap;
exports.validPassport = validPassport;
exports.arrayToList = arrayToList;
exports.listToPassportType = listToPassportType;
exports.checkRequiredFields = checkRequiredFields;
exports.countVaildPassports = countVaildPassports;
/* input Not a pure module */
